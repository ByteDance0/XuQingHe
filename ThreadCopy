 #include<stdio.h>
 #include<stdlib.h>
 #include<unistd.h>
 #include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<pthread.h>
#include<sys/wait.h>
typedef struct a
{   
     char *srcfile;
     char *desfile;
     int number;
     int thread_number;   
 }th;
 int arg_check(const char * srcfile,int thread_number)
 {   
     if((access(srcfile,F_OK))!=0)
     {
         printf("No srcfile\n");
         exit(1);
     }
     if(thread_number<=0)
     {
         printf("Warning Thread_number <=0\n");
         exit(1);
     }
    return 0;
 }
 
 int block(const char * srcfile,int thread_number)
 {
     int srcfd=open(srcfile,O_RDONLY);
    int filesize=lseek(srcfd,0,SEEK_END);
     if(filesize%thread_number==0)
     return filesize/thread_number;
     else
         return filesize/thread_number+1;
 }
 void *thread_copy(void *th2)
 {
     th th1=*((th*)th2);
     int blocksize=block(th1.srcfile,th1.thread_number);
     printf("tid 0x%x   pos %d    blocksize %d\n",(unsigned int)pthread_self(    ),th1.number*blocksize,blocksize);
     int srcfd=open(th1.srcfile,O_RDONLY);
     int desfd=open(th1.desfile,O_WRONLY|O_CREAT);
     lseek(srcfd,th1.number*blocksize,SEEK_SET);
     lseek(desfd,th1.number*blocksize,SEEK_SET);
     int readlen;
     char buffer[blocksize];
     bzero(buffer,sizeof(buffer));
     readlen=read(srcfd,buffer,blocksize);
     write(desfd,buffer,readlen);
     pthread_exit((void*)3);
 
 }
 
 int main(int argc,char**argv)
 {
    int  thread_number=atoi(argv[3]);
     pthread_t tid[thread_number];
     arg_check(argv[1],thread_number);
     int blocksize=block(argv[1],thread_number);
     for(int i=0;i<thread_number;i++)
     {
         th th1;
         th1.srcfile=argv[1];
         th1.desfile=argv[2];
         th1.number=i;
        th1.thread_number=thread_number;
        pthread_create(&tid[i],NULL,thread_copy,(void*)&th1);
        usleep(3000);
 
     }
     for(int i=0;i<thread_number;i++)
     {       
         pthread_join(tid[i],NULL);
     }   
     printf("文件复制成功\n");
     return 0;
 }   
                                                           
